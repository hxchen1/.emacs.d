;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(xref--read-identifier-history evil-ex-history read-number-history empty-history org-tags-history minibuffer-history yes-or-no-p-history org-read-date-history command-history consult--line-history extended-command-history buffer-name-history file-name-history))
(setq evil-ex-history '(#("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1))))
(setq org-tags-history '("true"))
(setq minibuffer-history '("true" "RESET_CHECK_BOXES" "true" "RESET_CHECK_BOXES"))
(setq yes-or-no-p-history '("yes" "no" "qqqq" "no"))
(setq org-read-date-history '("21:00    " "23:00    " "20:00    " "   "))
(setq command-history '((completion-at-point) (execute-extended-command nil "completion-at-point" nil) (completion-at-point) (execute-extended-command nil "completion-at-point" "completion-at") (find-file "e:/JS/main.c" t) (kill-buffer "*Backtrace*") (find-file "~/.emacs.d/lisp/init-ide.el" t) (find-file "e:/JS/main.c" t) (evil-delete 1 3400 'line nil nil) (find-file "~/.emacs.d/lisp/init-ide.el" t) (find-file "e:/js/main.c" t) (evil-record-macro 113) (evil-record-macro 113) (evil-record-macro 10) (find-file "e:/js/main.c" t) (evil-delete 903 944 'line nil nil) (find-file "~/.emacs.d/lisp/init-ide.el" t) (execute-extended-command nil "package-install" "package-install ") (execute-extended-command nil "xref-find-definitions" "xref-find-de") (company-mode 'toggle) (execute-extended-command nil "company-mode" nil) (company-mode 'toggle) (execute-extended-command nil "company-mode" "company-mode") (find-file "e:/JS/main.c" t) (find-file "~/.emacs.d/lisp/init-ide.el" t) (find-file "e:/JS/main.c" t) (kill-buffer "main.c") (find-file "e:/JS/main.c" t) (evil-record-macro 113) (evil-record-macro 113) (find-file "~/.emacs.d/lisp/init-ide.el" t) (find-file "e:/JS/main.c" t) (shell nil) (execute-extended-command nil "shell" "shell") (find-file "e:/JS/" t) (restart-emacs nil) (execute-extended-command nil "restart-emacs" "resta") (find-file "e:/zsbc/" t) (find-file "~/.emacs.d/init.el" t) (switch-to-buffer "init.el" nil 'force-same-window) (switch-to-buffer "init-ide.el" nil 'force-same-window) (find-file "~/.emacs.d/lisp/init-ide.el" t) (switch-to-buffer "init-org.el" nil 'force-same-window) (find-file "e:/emacs/blog/config.toml" t) (switch-to-buffer "gtd.org" nil 'force-same-window) (switch-to-buffer "gtd.org" nil 'force-same-window) (switch-to-buffer "init-org.el" nil 'force-same-window) (switch-to-buffer "gtd.org" nil 'force-same-window) (switch-to-buffer "init-org.el" nil 'force-same-window) (switch-to-buffer "init-org.el" nil 'force-same-window) (switch-to-buffer "init-org.el" nil 'force-same-window) (find-file "~/.emacs.d/gtd.org" t) (switch-to-buffer "init-org.el" nil 'force-same-window) (kill-buffer "test.org") (find-file "~/.notes" t) (switch-to-buffer "test.org" nil 'force-same-window) (switch-to-buffer "init-org.el" nil 'force-same-window) (switch-to-buffer "test.org" nil 'force-same-window) (switch-to-buffer "init-org.el" nil 'force-same-window) (switch-to-buffer "test.org" nil 'force-same-window) (switch-to-buffer "init-org.el" nil 'force-same-window) (find-file "~/.emacs.d/test.org" t) (kill-buffer "*Messages*") (kill-buffer "*scratch*") (kill-buffer "*Warnings*") (kill-buffer "*Calendar*") (kill-buffer "*Buffer List*") (kill-buffer "*Edit Macro*") (evil-yank 144 144 'inclusive nil nil) (evil-yank 143 144 'inclusive nil nil) (kill-buffer "test.org") (kill-buffer "*Org Agenda*") (switch-to-buffer "init-org.el" nil 'force-same-window) (switch-to-buffer "test.org" nil 'force-same-window) (switch-to-buffer "init-org.el" nil 'force-same-window) (evil-delete 1597 1626 'line nil nil) (evil-delete 1597 1619 'line nil nil) (switch-to-buffer "init-ui.el" nil 'force-same-window) (org-set-property nil nil) (execute-extended-command nil "org-set-property" "org") (find-file "~/.emacs.d/lisp/init-ui.el" t) (find-file "~/.emacs.d/test.org" t) (find-file "~/.emacs.d/lisp/init-org.el" t) (org-set-property nil nil) (execute-extended-command nil "org-set-property" "org-set-pro") (find-file "~/.emacs.d/lisp/init-org.el" t) (find-file "~/.emacs.d/test.org" t) (kill-buffer "test.org") (evil-delete 24 85 'line nil nil) (switch-to-buffer "test.org" nil 'force-same-window) (evil-delete 1482 1508 'line nil nil) (evil-delete 1474 1475 'line nil nil) (evil-delete 1509 1529 'line nil nil) (evil-delete 1509 1536 'line nil nil) (find-file "~/.emacs.d/lisp/init-ui.el" t) (evil-delete 332 345 'line nil nil) (find-file "~/.emacs.d/test.org" t) (find-file "~/.emacs.d/lisp/init-org.el" t) (list-directory "~/.emacs.d/" nil)))
(setq consult--line-history '("even" "doom-mode"))
(setq extended-command-history '("completion-at-point" "package-install" "xref-find-definitions" "company-mode" "shell" "restart-emacs" "org-set-property" "recenter"))
(setq buffer-name-history '("*Backtrace*" "main.c" "init.el" "init-ide.el" "init-org.el" "gtd.org" "init-org.el" "gtd.org" "init-org.el" "test.org" "init-org.el" "test.org" "init-org.el" "test.org" "init-org.el" "*Messages*" "*scratch*" "*Warnings*" "*Calendar*" "*Buffer List*" "*Edit Macro*" "test.org" "*Org Agenda*" "init-org.el" "test.org" "init-org.el" "init-ui.el" "test.org"))
(setq file-name-history '("e:/JS/main.c" "~/.emacs.d/lisp/init-ide.el" "e:/JS/main.c" "~/.emacs.d/lisp/init-ide.el" "e:/js/main.c" "~/.emacs.d/lisp/init-ide.el" "e:/JS/main.c" "~/.emacs.d/lisp/init-ide.el" "e:/JS/main.c" "~/.emacs.d/lisp/init-ide.el" "e:/JS/main.c" "e:/JS/" "e:/zsbc/" "~/.emacs.d/init.el" "~/.emacs.d/lisp/init-ide.el" "e:/emacs/blog/config.toml" "~/.emacs.d/gtd.org" "~/.notes" "~/.emacs.d/test.org" "~/.emacs.d/lisp/init-ui.el" "~/.emacs.d/test.org" "~/.emacs.d/lisp/init-org.el" "~/.emacs.d/test.org" "~/.emacs.d/lisp/init-ui.el" "~/.emacs.d/test.org" "~/.emacs.d/lisp/init-org.el" "~/.emacs.d/" "~/.emacs.d/test.org" "~/.emacs.d/lisp/init-startup.el"))
(setq evil-jumps-history 'nil)
(setq mark-ring 'nil)
(setq search-ring 'nil)
(setq regexp-search-ring 'nil)
(setq extended-command-history '("completion-at-point" "package-install" "xref-find-definitions" "company-mode" "shell" "restart-emacs" "org-set-property" "recenter"))
